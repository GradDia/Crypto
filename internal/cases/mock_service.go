// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cases/service.go

// Package cases is a generated GoMock package.
package cases

import (
	entities "Cryptoproject/internal/entities"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateCoin mocks base method.
func (m *MockService) CreateCoin(ctx context.Context, coinName string, price float64) (*entities.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCoin", ctx, coinName, price)
	ret0, _ := ret[0].(*entities.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCoin indicates an expected call of CreateCoin.
func (mr *MockServiceMockRecorder) CreateCoin(ctx, coinName, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoin", reflect.TypeOf((*MockService)(nil).CreateCoin), ctx, coinName, price)
}

// GetCoinByName mocks base method.
func (m *MockService) GetCoinByName(ctx context.Context, coinName string) (*entities.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinByName", ctx, coinName)
	ret0, _ := ret[0].(*entities.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinByName indicates an expected call of GetCoinByName.
func (mr *MockServiceMockRecorder) GetCoinByName(ctx, coinName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinByName", reflect.TypeOf((*MockService)(nil).GetCoinByName), ctx, coinName)
}

// UpdateCoinPrice mocks base method.
func (m *MockService) UpdateCoinPrice(ctx context.Context, coinName string, newPrice float64) (*entities.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoinPrice", ctx, coinName, newPrice)
	ret0, _ := ret[0].(*entities.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCoinPrice indicates an expected call of UpdateCoinPrice.
func (mr *MockServiceMockRecorder) UpdateCoinPrice(ctx, coinName, newPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoinPrice", reflect.TypeOf((*MockService)(nil).UpdateCoinPrice), ctx, coinName, newPrice)
}
